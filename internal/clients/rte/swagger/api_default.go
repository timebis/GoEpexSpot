/*
 * Wholesale Market
 *
 * Data related to the whole electricity market within EPEX Spot and Nord Pool hub Stock exchange operations.
 *
 * API version: 2.0
 * Generated by: Swagger Codegen (https://github.com/swagger-api/swagger-codegen.git)
 */

package swagger

import (
	"context"
	"fmt"
	"io/ioutil"
	"net/http"
	"net/url"
	"strings"

	"github.com/pkg/errors"
)

// Linger please
var (
	_ context.Context
)

type DefaultApiService service

/*
DefaultApiService
This service is for obtaining data about Epex Spot and Nord Pool prices and hourly volumes. Epex Spot is the daily electricity market operated by EPEX Spot SE. EPEX Spot SE is a European country (Societas Europaea ou SE) based in Paris with a branch in Leipzig. The range of products includes spot electricity transactions were Germany, France, Austria and Switzerland. These countries account for more than a third of total power consumption in Europe.
  - @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().

@return []FrancePowerExchanges
*/
func (a *DefaultApiService) GetFrancePowerExchanges(ctx context.Context) ([]FrancePowerExchanges, *http.Response, error) {
	var (
		localVarHttpMethod  = strings.ToUpper("Get")
		localVarPostBody    interface{}
		localVarFileName    string
		localVarFileBytes   []byte
		localVarReturnValue []FrancePowerExchanges
	)

	// create path and map variables
	localVarPath := a.client.cfg.BasePath + "/france_power_exchanges"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHttpContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHttpContentType := selectHeaderContentType(localVarHttpContentTypes)
	if localVarHttpContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHttpContentType
	}

	// to determine the Accept header
	localVarHttpHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHttpHeaderAccept := selectHeaderAccept(localVarHttpHeaderAccepts)
	if localVarHttpHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHttpHeaderAccept
	}
	r, err := a.client.prepareRequest(ctx, localVarPath, localVarHttpMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	fmt.Printf("Request: %v\n", r)

	localVarHttpResponse, err := a.client.callAPI(r)
	if err != nil || localVarHttpResponse == nil {
		return localVarReturnValue, localVarHttpResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHttpResponse.Body)
	localVarHttpResponse.Body.Close()
	if err != nil {
		return localVarReturnValue, localVarHttpResponse, err
	}

	if localVarHttpResponse.StatusCode < 300 {
		// If we succeed, return the data, otherwise pass on to decode error.
		err = a.client.decode(&localVarReturnValue, localVarBody, localVarHttpResponse.Header.Get("Content-Type"))
		return localVarReturnValue, localVarHttpResponse, err
	}

	if localVarHttpResponse.StatusCode >= 300 {
		newErr := GenericSwaggerError{
			body:  localVarBody,
			error: localVarHttpResponse.Status,
		}

		if localVarHttpResponse.StatusCode == 200 {
			var v []FrancePowerExchanges
			err = a.client.decode(&v, localVarBody, localVarHttpResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHttpResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHttpResponse, newErr
		}

		if localVarHttpResponse.StatusCode >= 400 && localVarHttpResponse.StatusCode < 600 {
			// var v ModelError
			// err = a.client.decode(&v, localVarBody, localVarHttpResponse.Header.Get("Content-Type"))
			// if err != nil {
			// 	newErr.error = err.Error()
			// 	return localVarReturnValue, localVarHttpResponse, newErr
			// }
			// newErr.model = v

			// simplified error handling as rte dont give any error response
			return localVarReturnValue, localVarHttpResponse, errors.New(localVarHttpResponse.Status)
		}

		return localVarReturnValue, localVarHttpResponse, newErr
	}

	return localVarReturnValue, localVarHttpResponse, nil
}
